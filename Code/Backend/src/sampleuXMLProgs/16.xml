<?xml version="1.0" encoding="UTF-8"?>

	<!--
		This program demonstrates constant pointer and pointer to constant variable - Part2
		
	-->
<uXML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" scope="static">
<block>
	<pointer-type name="ptr1" refType="int"/>	
	
	<!-- int i = 10 -->
	<var name="i" type="int" mutable="yes">
		<constant type="int" value="10"/>
	</var>
	
	<!-- int n = 5 -->
	<var name="n" type="int" mutable="yes">
		<constant type="int" value="5"/>
	</var>
	
	<!-- const int m = 9 -->
	<var name="m" type="int" mutable="no">
		<constant type="int" value="9"/>
	</var>
	
	<!-- _________________ Constant pointer or Pointer Non-mutable _________________  -->
	
	<!-- 1. Since m is a const (const int m = 9), then you cannot assign &m to k. 
			int *const k = &m (ptrMutable)
	-->
	<!-- 
	<var name="k" type="ptr1" ptrMutable="no" valueMutable="yes">
		<operator value="@">
			<variable name="m"/>
		</operator>
	</var>
	 -->
	<!-- Constant pointer definition -->
	<!-- int *const k = &n (ptrMutable) -->
	 
	 <!--   
	<var name="k" type="ptr1" ptrMutable="no" valueMutable="yes">
		<operator value="@">
			<variable name="n"/>
		</operator>
	</var>
	    --> 
	 

	<!-- 2. You cannot assign address of i to k 
	(k = &i) 
	-->
	<!--
	<assign>
		<variable name="k"/>
		<operator value="@">	
			<variable name="i"/>
		</operator>
	</assign>
	-->
	
	<!-- 3. Since k is a pointer non-mutable, we can change the value that is stored at the 
		    address pointed by k.
		    *k = 9 
	-->
	 
	<!-- 
	<assign>
		<operator value="#">
			<variable name="k"/>
		</operator>
		<constant type="int" value="9"/>
	</assign> -->
	 
	<!--  Should give error, since k is pointing to int and not string --> -->
	<!-- *k = "kunal" -->
	<!-- 
	<assign>
		<operator value="#">
			<variable name="k"/>
		</operator>
		<constant type="string" value="kunal"/>
	</assign>--> 
	
	<!--  
	<print>
		<variable name="k"/>
	</print>
	--> 
	 
	 
	 
	 <!-- _________________ Pointer to constant variable or Value Non-mutable _________________  -->
	 <!-- 4. Unlike constant pointer, it is fine if l is a constant integer and it's address is getting assigned
		  to a pointer to a constant variable.
		  const int *l = &m;  
	-->
	  
	 <var name="l" type="ptr1" ptrMutable="yes" valueMutable="no">
	 	<operator value="@">
	 		<variable name="n"/>
	 	</operator>
	 </var>
	  
	  
	  
	 
	 <!-- 5. Since l is a value non-mutable, we can change the address to which m is pointing to. 
			l = &i; -->
	 <!-- 
	 <assign>
	 	<variable name="l"/>
	 	<operator value="@">	
	 		<variable name="i"/>
	 	</operator>
	 </assign> 
	 -->
	 
	 
	 <!-- 6. However we can't change the value that is stored at address pointed by l. (*l = 8) 
	 NOT WORKING!!
	 -->
	   
	 <assign>
	 	<operator value="#">
	 		<variable name="l"/>
	 	</operator>
	 	<constant type="int" value="8"/>
	 </assign>
	  
	  
	 <!-- 7. But value of n can be changed even though it's address is stored in m. As expected , even
		    the value that is stored at address pointed by m will change.
			n = 21;
	-->
	 
	<assign>
		<variable name="n"/>
		<constant type="int" value="21"/>
	</assign>
	
	
	 
	<print>
		<variable name="l"/>
	</print>
	 
</block>	 
	
</uXML>
