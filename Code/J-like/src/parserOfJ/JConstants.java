/* Generated By:JavaCC: Do not edit this line. JConstants.java */
package parserOfJ;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface JConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT_CONSTANT = 5;
  /** RegularExpression Id. */
  int FLOAT_CONSTANT = 6;
  /** RegularExpression Id. */
  int STRING_CONSTANT = 7;
  /** RegularExpression Id. */
  int BOOL_CONSTANT = 8;
  /** RegularExpression Id. */
  int CHAR_CONSTANT = 9;
  /** RegularExpression Id. */
  int PLUS = 16;
  /** RegularExpression Id. */
  int MINUS = 17;
  /** RegularExpression Id. */
  int ASTERISK = 18;
  /** RegularExpression Id. */
  int DIVIDE = 19;
  /** RegularExpression Id. */
  int MOD = 20;
  /** RegularExpression Id. */
  int AMPERSAND = 21;
  /** RegularExpression Id. */
  int BIT_OR = 22;
  /** RegularExpression Id. */
  int BIT_XOR = 23;
  /** RegularExpression Id. */
  int BIT_COMPLEMENT = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int NT_EQ = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int LT_EQ = 31;
  /** RegularExpression Id. */
  int GT_EQ = 32;
  /** RegularExpression Id. */
  int GT = 33;
  /** RegularExpression Id. */
  int PROGRAM = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int THEN = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int DO = 38;
  /** RegularExpression Id. */
  int WHILE = 39;
  /** RegularExpression Id. */
  int FOR = 40;
  /** RegularExpression Id. */
  int CALL = 41;
  /** RegularExpression Id. */
  int PRINT = 42;
  /** RegularExpression Id. */
  int PRINTLN = 43;
  /** RegularExpression Id. */
  int FINAL = 44;
  /** RegularExpression Id. */
  int CLASS = 45;
  /** RegularExpression Id. */
  int INHERITS = 46;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 47;
  /** RegularExpression Id. */
  int SUPER_CALL = 48;
  /** RegularExpression Id. */
  int NEW = 49;
  /** RegularExpression Id. */
  int FUNCTION = 50;
  /** RegularExpression Id. */
  int RETURN = 51;
  /** RegularExpression Id. */
  int BLOCK_START = 52;
  /** RegularExpression Id. */
  int BLOCK_END = 53;
  /** RegularExpression Id. */
  int SQUARE_START = 54;
  /** RegularExpression Id. */
  int SQUARE_END = 55;
  /** RegularExpression Id. */
  int ROUND_START = 56;
  /** RegularExpression Id. */
  int ROUND_END = 57;
  /** RegularExpression Id. */
  int ASSIGN = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int STMT_TERMINATOR = 60;
  /** RegularExpression Id. */
  int PERIOD = 61;
  /** RegularExpression Id. */
  int INT = 62;
  /** RegularExpression Id. */
  int FLOAT = 63;
  /** RegularExpression Id. */
  int CHAR = 64;
  /** RegularExpression Id. */
  int BOOL = 65;
  /** RegularExpression Id. */
  int STRING = 66;
  /** RegularExpression Id. */
  int VOID = 67;
  /** RegularExpression Id. */
  int ARRAY = 68;
  /** RegularExpression Id. */
  int ID = 69;
  /** RegularExpression Id. */
  int ALPHA = 70;
  /** RegularExpression Id. */
  int DIGIT = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int InsideComment = 1;
  /** Lexical state. */
  int InsideNewComment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<INT_CONSTANT>",
    "<FLOAT_CONSTANT>",
    "<STRING_CONSTANT>",
    "<BOOL_CONSTANT>",
    "<CHAR_CONSTANT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"//\"",
    "<token of kind 14>",
    "<token of kind 15>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\">\"",
    "\"PROGRAM\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"do\"",
    "\"while\"",
    "\"for\"",
    "\"call\"",
    "\"print\"",
    "\"println\"",
    "\"final\"",
    "\"class\"",
    "\"inherits\"",
    "\"constructor\"",
    "\"super\"",
    "\"new\"",
    "\"function\"",
    "\"return\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\",\"",
    "\";\"",
    "\".\"",
    "\"int\"",
    "\"float\"",
    "\"char\"",
    "\"boolean\"",
    "\"string\"",
    "\"void\"",
    "\"array\"",
    "<ID>",
    "<ALPHA>",
    "<DIGIT>",
  };

}
